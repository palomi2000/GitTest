
user@DESKTOP-OL54O8F MINGW64 ~
$ mkdir GitTest

user@DESKTOP-OL54O8F MINGW64 ~
$ cd GitTest

user@DESKTOP-OL54O8F MINGW64 ~/GitTest
$ git init
Initialized empty Git repository in C:/Users/user/GitTest/.git/

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ notepad file1.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ notepad file2.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ notepad file3.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ ls
file1.txt  file2.txt  file3.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git checkout -b Dev
Switched to a new branch 'Dev'

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Dev)
$ git add file1.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Dev)
$ git commit -m "file1 initial commit"
[Dev (root-commit) 929f55c] file1 initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 file1.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Dev)
$ git branch master

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Dev)
$ git switch master
Switched to branch 'master'

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git branch
  Dev
* master

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git branch Test

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git branch
  Dev
  Test
* master

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git switch Test
Switched to branch 'Test'

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Test)
$ git add file2.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Test)
$ git add file3.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Test)
$ git commit -m "file 2 and file3 initial commit"
[Test cb606eb] file 2 and file3 initial commit
 2 files changed, 2 insertions(+)
 create mode 100644 file2.txt
 create mode 100644 file3.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (Test)
$ git switch master
Switched to branch 'master'

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ notepad file1.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file1.txt

no changes added to commit (use "git add" and/or "git commit -a")

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git diff
diff --git a/file1.txt b/file1.txt
index 5e1c309..c33dcd1 100644
--- a/file1.txt
+++ b/file1.txt
@@ -1 +1,2 @@
-Hello World
\ No newline at end of file
+Hello World
+Good Morning
\ No newline at end of file

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git merge Dev
Already up to date.

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git merge Test
Updating 929f55c..cb606eb
Fast-forward
 file2.txt | 1 +
 file3.txt | 1 +
 2 files changed, 2 insertions(+)
 create mode 100644 file2.txt
 create mode 100644 file3.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ ls
file1.txt  file2.txt  file3.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git merge Dev
Already up to date.

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   file1.txt

no changes added to commit (use "git add" and/or "git commit -a")

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git branch
  Dev
  Test
* master

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git add file1.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git commit -m "file1 changes made"
[master 5704a8e] file1 changes made
 1 file changed, 2 insertions(+), 1 deletion(-)

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git status
On branch master
nothing to commit, working tree clean

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git log
commit 5704a8ed0e3fa51154658259580123ba24f8712f (HEAD -> master)
Author: palomi2000 <palomi.shah21@gmail.com>
Date:   Mon Jul 19 11:11:17 2021 +0530

    file1 changes made

commit cb606eb87d137225d40f746f264b20c073b8f791 (Test)
Author: palomi2000 <palomi.shah21@gmail.com>
Date:   Mon Jul 19 11:08:28 2021 +0530

    file 2 and file3 initial commit

commit 929f55c1262ce16108bbce8eee5ef4a350be7ecd (Dev)
Author: palomi2000 <palomi.shah21@gmail.com>
Date:   Mon Jul 19 11:06:56 2021 +0530

    file1 initial commit

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git remote add origin https://github.com/palomi2000/GitTest.git

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ git push origin master
Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 4 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (10/10), 832 bytes | 208.00 KiB/s, done.
Total 10 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/palomi2000/GitTest.git
 * [new branch]      master -> master

user@DESKTOP-OL54O8F MINGW64 ~/GitTest (master)
$ cd ..

user@DESKTOP-OL54O8F MINGW64 ~
$ mkdir GitTestLocal

user@DESKTOP-OL54O8F MINGW64 ~
$ cd GitTestLocal

user@DESKTOP-OL54O8F MINGW64 ~/GitTestLocal
$ ls

user@DESKTOP-OL54O8F MINGW64 ~/GitTestLocal
$ git clone https://github.com/palomi2000/GitTest.git
Cloning into 'GitTest'...
remote: Enumerating objects: 10, done.
remote: Counting objects: 100% (10/10), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 10 (delta 0), reused 10 (delta 0), pack-reused 0
Receiving objects: 100% (10/10), done.

user@DESKTOP-OL54O8F MINGW64 ~/GitTestLocal
$ notepad Solution.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTestLocal
$ ls
GitTest/  Solution.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTestLocal
$ rm Solution.txt

user@DESKTOP-OL54O8F MINGW64 ~/GitTestLocal
$ cd GitTest

user@DESKTOP-OL54O8F MINGW64 ~/GitTestLocal/GitTest (master)
$ notepad Solution.txt


